/**
 * Path.g4j
 *
 * Copyright 2014-2015 Michael Hoffer <info@michaelhoffer.de>. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *    1. Redistributions of source code must retain the above copyright notice, this list of
 *       conditions and the following disclaimer.
 *
 *    2. Redistributions in binary form must reproduce the above copyright notice, this list
 *       of conditions and the following disclaimer in the documentation and/or other materials
 *       provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY Michael Hoffer <info@michaelhoffer.de> "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Michael Hoffer <info@michaelhoffer.de> OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are those of the
 * authors and should not be interpreted as representing official policies, either expressed
 * or implied, of Michael Hoffer <info@michaelhoffer.de>.
 */ 

package eu.mihosoft.vrl.visolines;

import BSpline;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import javafx.scene.paint.Color;
import javafx.scene.shape.LineTo;
import javafx.scene.shape.MoveTo;

/**
 *
 * @author Michael Hoffer &lt;info@michaelhoffer.de&gt;
 * @param <T>
 */
public class Path<<T>> {

    private final T isoValue;

    private final java.util.List<java.util.List<Vector2d>> contours;
    private java.util.List<Vector2d> vertices;

    private final BSpline optimizer = new BSpline();

    public Path<<T>>(T isoValue) {
        contours = new java.util.ArrayList<>();
        vertices = new java.util.ArrayList<>();
        contours.add(vertices);
        this.isoValue = isoValue;
    }

    public int getNumberOfContours() {
        return contours.size();
    }

    public java.util.List<Vector2d> getContour(int i) {
        return contours.get(i);
    }

    public void moveTo(double x, double y) {
        moveTo(new Vector2d(x, y));
    }

    public void moveTo(Vector2d p) {
        breakContour();
        vertices.add(p);

    }

    public void lineTo(Vector2d p) {
        vertices.add(p);
    }

    public void lineTo(double x, double y) {
        lineTo(new Vector2d(x, y));
    }



    public void breakContour() {
        if (!vertices.isEmpty()) {
            vertices = new java.util.ArrayList<>();
            contours.add(vertices);
        }
    }

    /**
     * @return the isoValue
     */
    public T getIsoValue() {
        return isoValue;
    }

    public boolean isEmpty() {
        return contours.isEmpty() || contours.stream().allMatch(verts -> verts.isEmpty());
    }
}
